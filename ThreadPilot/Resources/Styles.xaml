<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:controls="clr-namespace:ThreadPilot.Controls">

    <!-- Process Priorities Static Resource -->
    <x:Array x:Key="ProcessPriorities" Type="sys:String" 
             xmlns:sys="clr-namespace:System;assembly=mscorlib">
        <sys:String>Idle</sys:String>
        <sys:String>Below Normal</sys:String>
        <sys:String>Normal</sys:String>
        <sys:String>Above Normal</sys:String>
        <sys:String>High</sys:String>
        <sys:String>Realtime</sys:String>
    </x:Array>

    <!-- Button Styles -->
    <Style x:Key="ButtonBaseStyle" TargetType="Button">
        <Setter Property="Padding" Value="12,8"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="FontWeight" Value="Medium"/>
        <Setter Property="FontSize" Value="13"/>
        <Setter Property="Height" Value="36"/>
        <Setter Property="MinWidth" Value="80"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="UseLayoutRounding" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border x:Name="border" 
                            Background="{TemplateBinding Background}" 
                            BorderBrush="{TemplateBinding BorderBrush}" 
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="4">
                        <ContentPresenter x:Name="contentPresenter" 
                                          Focusable="False" 
                                          Margin="{TemplateBinding Padding}" 
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="border" Property="Opacity" Value="0.9"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="border" Property="Opacity" Value="0.8"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="border" Property="Opacity" Value="0.5"/>
                            <Setter TargetName="contentPresenter" Property="Opacity" Value="0.5"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="PrimaryButtonStyle" TargetType="Button" BasedOn="{StaticResource ButtonBaseStyle}">
        <Setter Property="Background" Value="{DynamicResource PrimaryButtonBackgroundBrush}"/>
        <Setter Property="Foreground" Value="{DynamicResource PrimaryButtonForegroundBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource PrimaryButtonBorderBrush}"/>
    </Style>

    <Style x:Key="OutlineButtonStyle" TargetType="Button" BasedOn="{StaticResource ButtonBaseStyle}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="{DynamicResource ForegroundBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}"/>
    </Style>

    <Style x:Key="IconButtonStyle" TargetType="Button">
        <Setter Property="Width" Value="32"/>
        <Setter Property="Height" Value="32"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Padding" Value="4"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border x:Name="border" 
                            Background="{TemplateBinding Background}" 
                            CornerRadius="4"
                            Padding="{TemplateBinding Padding}">
                        <ContentPresenter x:Name="contentPresenter" 
                                          Focusable="False" 
                                          HorizontalAlignment="Center" 
                                          VerticalAlignment="Center"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="border" Property="Background" Value="{DynamicResource ButtonHoverBrush}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="border" Property="Background" Value="{DynamicResource ButtonPressedBrush}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="contentPresenter" Property="Opacity" Value="0.5"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ComboBox Style -->
    <Style x:Key="ComboBoxStyle" TargetType="ComboBox">
        <Setter Property="Padding" Value="8,4"/>
        <Setter Property="Height" Value="32"/>
        <Setter Property="Background" Value="{DynamicResource ControlBackgroundBrush}"/>
        <Setter Property="Foreground" Value="{DynamicResource ForegroundBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="UseLayoutRounding" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ComboBox">
                    <Grid>
                        <Border x:Name="border" 
                                Background="{TemplateBinding Background}" 
                                BorderBrush="{TemplateBinding BorderBrush}" 
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="4">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*"/>
                                    <ColumnDefinition Width="Auto"/>
                                </Grid.ColumnDefinitions>
                                <ContentPresenter x:Name="contentPresenter" 
                                                  Grid.Column="0"
                                                  Focusable="False" 
                                                  Margin="{TemplateBinding Padding}" 
                                                  Content="{TemplateBinding SelectionBoxItem}"
                                                  ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"/>
                                <Path x:Name="arrow" 
                                      Grid.Column="1" 
                                      Data="M7,10L12,15L17,10H7Z" 
                                      Fill="{DynamicResource SecondaryForegroundBrush}" 
                                      Width="12" 
                                      Height="12"
                                      Margin="0,0,10,0"/>
                            </Grid>
                        </Border>
                        <Popup x:Name="PART_Popup" 
                               AllowsTransparency="True" 
                               IsOpen="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}" 
                               Placement="Bottom" 
                               PopupAnimation="Slide"
                               StaysOpen="False">
                            <Border x:Name="dropDownBorder" 
                                    Background="{DynamicResource ControlBackgroundBrush}" 
                                    BorderBrush="{DynamicResource BorderBrush}" 
                                    BorderThickness="1"
                                    CornerRadius="4"
                                    Margin="0,2,0,0"
                                    MinWidth="{TemplateBinding ActualWidth}">
                                <ScrollViewer SnapsToDevicePixels="True">
                                    <ItemsPresenter KeyboardNavigation.DirectionalNavigation="Contained"/>
                                </ScrollViewer>
                            </Border>
                        </Popup>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource AccentBrush}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="border" Property="Opacity" Value="0.5"/>
                            <Setter TargetName="contentPresenter" Property="Opacity" Value="0.5"/>
                            <Setter TargetName="arrow" Property="Opacity" Value="0.5"/>
                        </Trigger>
                        <Trigger Property="IsDropDownOpen" Value="True">
                            <Setter TargetName="arrow" Property="RenderTransform">
                                <Setter.Value>
                                    <RotateTransform Angle="180" CenterX="6" CenterY="6"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ComboBoxItem Style -->
    <Style x:Key="ComboBoxItemStyle" TargetType="ComboBoxItem">
        <Setter Property="Padding" Value="8,4"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ComboBoxItem">
                    <Border x:Name="border" 
                            Background="{TemplateBinding Background}" 
                            BorderThickness="0"
                            Padding="{TemplateBinding Padding}">
                        <ContentPresenter/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="border" Property="Background" Value="{DynamicResource ButtonHoverBrush}"/>
                        </Trigger>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter TargetName="border" Property="Background" Value="{DynamicResource AccentBrush}"/>
                            <Setter Property="Foreground" Value="{DynamicResource AccentForegroundBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ListView Style -->
    <Style x:Key="ListViewStyle" TargetType="ListView">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="True"/>
        <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
        <Setter Property="ItemContainerStyle">
            <Setter.Value>
                <Style TargetType="ListViewItem">
                    <Setter Property="Padding" Value="10,5"/>
                    <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
                    <Setter Property="VerticalContentAlignment" Value="Center"/>
                    <Setter Property="Background" Value="Transparent"/>
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="ListViewItem">
                                <Border x:Name="border" 
                                        Background="{TemplateBinding Background}" 
                                        BorderThickness="0"
                                        Padding="{TemplateBinding Padding}">
                                    <ContentPresenter/>
                                </Border>
                                <ControlTemplate.Triggers>
                                    <Trigger Property="IsMouseOver" Value="True">
                                        <Setter TargetName="border" Property="Background" Value="{DynamicResource ButtonHoverBrush}"/>
                                    </Trigger>
                                    <Trigger Property="IsSelected" Value="True">
                                        <Setter TargetName="border" Property="Background" Value="{DynamicResource ListItemSelectedBrush}"/>
                                    </Trigger>
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- TabItem Style -->
    <Style x:Key="TabItemStyle" TargetType="TabItem">
        <Setter Property="Padding" Value="15,8"/>
        <Setter Property="Margin" Value="0,0,10,0"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="TabItem">
                    <Grid>
                        <Border x:Name="mainBorder" 
                                Background="{TemplateBinding Background}" 
                                BorderThickness="0"
                                CornerRadius="4"
                                Padding="{TemplateBinding Padding}">
                            <ContentPresenter x:Name="contentPresenter" 
                                              ContentSource="Header" 
                                              RecognizesAccessKey="True" 
                                              HorizontalAlignment="Center" 
                                              VerticalAlignment="Center"/>
                        </Border>
                        <Border x:Name="selectedIndicator" 
                                Height="2" 
                                Background="{DynamicResource AccentBrush}" 
                                VerticalAlignment="Bottom" 
                                Margin="5,0,5,0"
                                Visibility="Collapsed"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="mainBorder" Property="Background" Value="{DynamicResource ButtonHoverBrush}"/>
                        </Trigger>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter TargetName="mainBorder" Property="Background" Value="{DynamicResource ButtonHoverBrush}"/>
                            <Setter TargetName="contentPresenter" Property="TextElement.FontWeight" Value="SemiBold"/>
                            <Setter TargetName="selectedIndicator" Property="Visibility" Value="Visible"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Slider Style -->
    <Style x:Key="SliderStyle" TargetType="Slider">
        <Setter Property="Foreground" Value="{DynamicResource AccentBrush}"/>
        <Setter Property="Background" Value="{DynamicResource BorderBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Slider">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto" MinHeight="{TemplateBinding MinHeight}"/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>
                        <TickBar x:Name="TopTick" Visibility="Collapsed" Fill="{TemplateBinding Foreground}" Placement="Top" Height="4" Grid.Row="0"/>
                        <Border x:Name="TrackBackground" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Height="4" Margin="5,0" Grid.Row="1" CornerRadius="2"/>
                        <Track x:Name="PART_Track" Grid.Row="1">
                            <Track.DecreaseRepeatButton>
                                <RepeatButton Command="Slider.DecreaseLarge" Background="{TemplateBinding Foreground}" Style="{StaticResource {x:Null}}" Focusable="False">
                                    <RepeatButton.Template>
                                        <ControlTemplate TargetType="RepeatButton">
                                            <Border Background="{TemplateBinding Background}" BorderThickness="0" Height="4" Margin="5,0" CornerRadius="2"/>
                                        </ControlTemplate>
                                    </RepeatButton.Template>
                                </RepeatButton>
                            </Track.DecreaseRepeatButton>
                            <Track.Thumb>
                                <Thumb x:Name="Thumb" Focusable="False">
                                    <Thumb.Template>
                                        <ControlTemplate TargetType="Thumb">
                                            <Ellipse x:Name="Ellipse" Fill="{DynamicResource AccentBrush}" Width="16" Height="16" StrokeThickness="0"/>
                                            <ControlTemplate.Triggers>
                                                <Trigger Property="IsMouseOver" Value="True">
                                                    <Setter TargetName="Ellipse" Property="Width" Value="18"/>
                                                    <Setter TargetName="Ellipse" Property="Height" Value="18"/>
                                                </Trigger>
                                                <Trigger Property="IsDragging" Value="True">
                                                    <Setter TargetName="Ellipse" Property="Width" Value="20"/>
                                                    <Setter TargetName="Ellipse" Property="Height" Value="20"/>
                                                </Trigger>
                                            </ControlTemplate.Triggers>
                                        </ControlTemplate>
                                    </Thumb.Template>
                                </Thumb>
                            </Track.Thumb>
                            <Track.IncreaseRepeatButton>
                                <RepeatButton Command="Slider.IncreaseLarge" Style="{StaticResource {x:Null}}" Focusable="False">
                                    <RepeatButton.Template>
                                        <ControlTemplate TargetType="RepeatButton">
                                            <Border Background="Transparent" BorderThickness="0"/>
                                        </ControlTemplate>
                                    </RepeatButton.Template>
                                </RepeatButton>
                            </Track.IncreaseRepeatButton>
                        </Track>
                        <TickBar x:Name="BottomTick" Fill="{TemplateBinding Foreground}" Placement="Bottom" Height="4" Grid.Row="2" Visibility="Collapsed"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="TickPlacement" Value="TopLeft">
                            <Setter TargetName="TopTick" Property="Visibility" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="TickPlacement" Value="BottomRight">
                            <Setter TargetName="BottomTick" Property="Visibility" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="TickPlacement" Value="Both">
                            <Setter TargetName="TopTick" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="BottomTick" Property="Visibility" Value="Visible"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- CheckBox Style -->
    <Style x:Key="CheckBoxStyle" TargetType="CheckBox">
        <Setter Property="Foreground" Value="{DynamicResource ForegroundBrush}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Padding" Value="6,0,0,0"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="CheckBox">
                    <Grid x:Name="templateRoot" Background="Transparent" SnapsToDevicePixels="True">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Border x:Name="checkBoxBorder" 
                                Grid.Column="0" 
                                BorderBrush="{TemplateBinding BorderBrush}" 
                                BorderThickness="{TemplateBinding BorderThickness}" 
                                Background="{TemplateBinding Background}" 
                                Height="20" 
                                Width="20" 
                                CornerRadius="4">
                            <Grid x:Name="markGrid">
                                <Path x:Name="checkMark" 
                                      Data="M3.5,9.5 L6.5,12.5 L12.5,6.5" 
                                      Stroke="{DynamicResource AccentForegroundBrush}" 
                                      StrokeThickness="2" 
                                      Stretch="Uniform" 
                                      Margin="4"
                                      Visibility="Collapsed"/>
                            </Grid>
                        </Border>
                        <ContentPresenter x:Name="contentPresenter" 
                                          Grid.Column="1" 
                                          Focusable="False" 
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                          Margin="{TemplateBinding Padding}" 
                                          RecognizesAccessKey="True" 
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasContent" Value="True">
                            <Setter Property="Padding" Value="6,0,0,0"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="checkBoxBorder" Property="BorderBrush" Value="{DynamicResource AccentBrush}"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="checkBoxBorder" Property="Background" Value="{DynamicResource AccentBrush}"/>
                            <Setter TargetName="checkBoxBorder" Property="BorderBrush" Value="{DynamicResource AccentBrush}"/>
                            <Setter TargetName="checkMark" Property="Visibility" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="{x:Null}">
                            <Setter TargetName="checkBoxBorder" Property="Background" Value="{DynamicResource BorderBrush}"/>
                            <Setter TargetName="checkMark" Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="checkBoxBorder" Property="Opacity" Value="0.5"/>
                            <Setter TargetName="contentPresenter" Property="Opacity" Value="0.5"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- CircularProgressBar Style -->
    <Style x:Key="CircularProgressBarStyle" TargetType="ProgressBar">
        <Setter Property="Foreground" Value="{DynamicResource AccentBrush}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ProgressBar">
                    <Grid x:Name="TemplateRoot" Background="Transparent">
                        <Grid.Resources>
                            <Storyboard x:Key="IndeterminateStoryboard" RepeatBehavior="Forever">
                                <DoubleAnimationUsingKeyFrames Storyboard.TargetName="RotateTransform" Storyboard.TargetProperty="Angle">
                                    <DiscreteDoubleKeyFrame KeyTime="0:0:0" Value="0"/>
                                    <LinearDoubleKeyFrame KeyTime="0:0:2" Value="360"/>
                                </DoubleAnimationUsingKeyFrames>
                            </Storyboard>
                        </Grid.Resources>
                        <Ellipse x:Name="Track" 
                                 Stroke="{DynamicResource BorderBrush}" 
                                 StrokeThickness="2" 
                                 Fill="Transparent"/>
                        <Path x:Name="Indicator" 
                              Stroke="{TemplateBinding Foreground}" 
                              StrokeThickness="2" 
                              StrokeStartLineCap="Round" 
                              StrokeEndLineCap="Round">
                            <Path.Data>
                                <PathGeometry>
                                    <PathFigure StartPoint="0,0">
                                        <ArcSegment x:Name="ArcSegment" 
                                                   Size="0,0" 
                                                   IsLargeArc="False" 
                                                   SweepDirection="Clockwise" 
                                                   Point="0,0"/>
                                    </PathFigure>
                                </PathGeometry>
                            </Path.Data>
                            <Path.RenderTransform>
                                <TransformGroup>
                                    <RotateTransform x:Name="RotateTransform" Angle="0"/>
                                </TransformGroup>
                            </Path.RenderTransform>
                        </Path>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <EventTrigger RoutedEvent="FrameworkElement.Loaded">
                            <BeginStoryboard Storyboard="{StaticResource IndeterminateStoryboard}"/>
                        </EventTrigger>
                        <Trigger Property="IsIndeterminate" Value="True">
                            <Setter TargetName="Indicator" Property="Data">
                                <Setter.Value>
                                    <PathGeometry>
                                        <PathGeometry.Figures>
                                            <PathFigureCollection>
                                                <PathFigure StartPoint="9,1">
                                                    <PathFigure.Segments>
                                                        <PathSegmentCollection>
                                                            <ArcSegment Point="1,9" Size="8,8" IsLargeArc="False" SweepDirection="Clockwise"/>
                                                        </PathSegmentCollection>
                                                    </PathFigure.Segments>
                                                </PathFigure>
                                            </PathFigureCollection>
                                        </PathGeometry.Figures>
                                    </PathGeometry>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ToggleSwitch Style -->
    <Style TargetType="{x:Type controls:ToggleSwitch}">
        <Setter Property="Foreground" Value="{DynamicResource ForegroundBrush}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="OnColor" Value="{DynamicResource AccentBrush}"/>
        <Setter Property="OffColor" Value="{DynamicResource BorderBrush}"/>
        <Setter Property="ThumbColor" Value="{DynamicResource BackgroundBrush}"/>
        <Setter Property="Width" Value="50"/>
        <Setter Property="Height" Value="24"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:ToggleSwitch}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>
                        
                        <TextBlock x:Name="ToggleText" 
                                   Grid.Column="0"
                                   Text="{Binding IsChecked, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BoolToTextConverter}, ConverterParameter='On|Off'}" 
                                   VerticalAlignment="Center"
                                   HorizontalAlignment="Right"
                                   Margin="0,0,10,0"
                                   Foreground="{DynamicResource SecondaryForegroundBrush}"/>
                        
                        <Border x:Name="SwitchTrack" 
                                Grid.Column="1"
                                Width="{TemplateBinding Width}" 
                                Height="{TemplateBinding Height}" 
                                Background="{TemplateBinding OffColor}" 
                                CornerRadius="12" 
                                Padding="2">
                            <Ellipse x:Name="SwitchThumb" 
                                     Width="{Binding Height, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource SubtractConverter}, ConverterParameter=4}" 
                                     Height="{Binding Height, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource SubtractConverter}, ConverterParameter=4}" 
                                     Fill="{TemplateBinding ThumbColor}" 
                                     HorizontalAlignment="Left">
                                <Ellipse.RenderTransform>
                                    <TranslateTransform X="0" Y="0" />
                                </Ellipse.RenderTransform>
                            </Ellipse>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <ColorAnimation Storyboard.TargetName="SwitchTrack" 
                                                        Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" 
                                                        To="{Binding OnColor, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BrushToColorConverter}}" 
                                                        Duration="0:0:0.2"/>
                                        <DoubleAnimation Storyboard.TargetName="SwitchThumb" 
                                                         Storyboard.TargetProperty="(Ellipse.RenderTransform).(TranslateTransform.X)" 
                                                         To="{Binding Width, ElementName=SwitchTrack, Converter={StaticResource SubtractConverter}, ConverterParameter=20}" 
                                                         Duration="0:0:0.2">
                                            <DoubleAnimation.EasingFunction>
                                                <CubicEase EasingMode="EaseOut"/>
                                            </DoubleAnimation.EasingFunction>
                                        </DoubleAnimation>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <ColorAnimation Storyboard.TargetName="SwitchTrack" 
                                                        Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" 
                                                        To="{Binding OffColor, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BrushToColorConverter}}" 
                                                        Duration="0:0:0.2"/>
                                        <DoubleAnimation Storyboard.TargetName="SwitchThumb" 
                                                         Storyboard.TargetProperty="(Ellipse.RenderTransform).(TranslateTransform.X)" 
                                                         To="0" 
                                                         Duration="0:0:0.2">
                                            <DoubleAnimation.EasingFunction>
                                                <CubicEase EasingMode="EaseOut"/>
                                            </DoubleAnimation.EasingFunction>
                                        </DoubleAnimation>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="SwitchThumb" Property="Opacity" Value="0.9"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="SwitchTrack" Property="Opacity" Value="0.5"/>
                            <Setter TargetName="SwitchThumb" Property="Opacity" Value="0.5"/>
                            <Setter TargetName="ToggleText" Property="Opacity" Value="0.5"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>
